--- SuiteSparse-5.10.1/GraphBLAS/GraphBLAS/CMakeLists.txt~	2021-05-18 13:01:16.000000000 +0000
+++ SuiteSparse-5.10.1/GraphBLAS/GraphBLAS/CMakeLists.txt	2021-05-27 16:44:39.913118628 +0000
@@ -91,7 +91,7 @@
 # compiler-specific modifications, here is the place to do it.
 if ( "${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
     # cmake 3.0 doesn't have this problem.
-    set ( CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -std=c11 -lm -Wno-pragmas " )
+    set ( CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -std=gnu11 -lm -Wno-pragmas " )
     # operations may be carried out in higher precision
     set ( CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -fexcess-precision=fast " )
     # faster single complex multiplication and division
--- SuiteSparse-5.10.1/GraphBLAS/CMakeLists.txt~	2021-05-18 13:01:16.000000000 +0000
+++ SuiteSparse-5.10.1/GraphBLAS/CMakeLists.txt	2021-05-27 16:45:11.434118189 +0000
@@ -181,7 +181,7 @@
     # set ( CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -g" )
     # cmake 2.8 workaround: gcc needs to be told to do ANSI C11.
     # cmake 3.0 doesn't have this problem.
-    set ( CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -std=c11 -lm -Wno-pragmas " )
+    set ( CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -std=gnu11 -lm -Wno-pragmas " )
     # operations may be carried out in higher precision
     set ( CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -fexcess-precision=fast " )
     # faster single complex multiplication and division
@@ -196,13 +196,13 @@
         message ( FATAL_ERROR "gcc version must be at least 4.9" )
     endif ( )
 elseif ( "${CMAKE_C_COMPILER_ID}" STREQUAL "Intel" )
-    # options for icc: also needs -std=c11
+    # options for icc: also needs -std=gnu11
     set ( CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -diag-disable 10397,15552 " )
     set ( CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -qopt-report=5 -qopt-report-phase=vec" )
     # the -mp1 option is important for predictable floating-point results with
     # the icc compiler.  Without, ((float) 1.)/((float) 0.) produces NaN,
     # instead of the correct result, Inf.
-    set ( CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -std=c11 -mp1" )
+    set ( CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -std=gnu11 -mp1" )
     # The -g option is useful for the Intel VTune tool, but it should be
     # removed in production.  Comment this line out if not in use:
     # set ( CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -g" )
--- SuiteSparse-5.10.1/GraphBLAS/alternative/Makefile~	2021-05-18 13:01:16.000000000 +0000
+++ SuiteSparse-5.10.1/GraphBLAS/alternative/Makefile	2021-05-27 16:45:30.248117928 +0000
@@ -43,7 +43,7 @@
 # CFLAGS += -g
 ifneq ($(CC),c++)
     # comment this out if using c++:
-    CFLAGS += -std=c11 
+    CFLAGS += -std=gnu11 
 endif
 CPPFLAGS = -I../Include -I../Source -I../Source/Template -I../Source/Generated -I../Source/Generator
 SO_OPTS = $(LDFLAGS)
